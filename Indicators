import numpy as np
import pandas as pd
import yfinance as yf
import warnings
warnings.filterwarnings('ignore')
import datetime as dt
from datetime import timedelta

class cl_Two618_indicator():
    def __init__(self):
        pass
 
    def fn_william_vix_support(df1,look_back_Bollinger=20,look_back_William_Vix=22,multiplier=2,look_back_range=50,
                   percentage_high=0.85,percentage_low=1.01):      
            df1['wvf_support'] = ((df1['Close'].rolling(look_back_William_Vix).max()-df1['Low'])/df1['Close'].rolling(look_back_William_Vix).max())*100
            df1['bbl_std_dev_support'] = multiplier * (df1['wvf_support'].rolling(look_back_Bollinger)).std()
            df1['bbl_midLine_support'] = (df1['wvf_support'].rolling(look_back_Bollinger)).mean()
            df1['bbl_lowerBand_support'] = df1['bbl_midLine_support'] - df1['bbl_std_dev_support']
            df1['bbl_upperBand_support'] =df1['bbl_midLine_support'] + df1['bbl_std_dev_support']
            df1['wvf_rangeHigh_support'] = ((df1['wvf_support'].rolling(look_back_range)).max()) * percentage_high
            df1['wvf_rangeLow_support'] = ((df1['wvf_support'].rolling(look_back_range)).min()) * percentage_low
            df1['wvf_support_signal'] = np.where((df1['wvf_support'] >= df1['bbl_upperBand_support']) | (df1['wvf_support'] >= df1['wvf_rangeHigh_support']), 'lime', 'white')
            return df1
   
    def fn_william_vix_resistance(df1,look_back_Bollinger=20,look_back_William_Vix=22,multiplier=2,threshold_resistance=0.5):
       
        def fn_golden_cross(wvf_resistance,upperBand_resistance):
            
            return wvf_resistance > upperBand_resistance
        def fn_death_cross(wvf_resistance,upperBand_resistance):
            return wvf_resistance < upperBand_resistance

        def fn_golden(wvf_resistance,upperBand_resistance):
            g = fn_golden_cross(wvf_resistance,upperBand_resistance)
            d = fn_death_cross(wvf_resistance,upperBand_resistance)
            res = g & d.shift(1)
            return res   

        def fn_death(wvf_resistance,upperBand_resistance):
            g = fn_golden_cross(wvf_resistance,upperBand_resistance)
            d = fn_death_cross(wvf_resistance,upperBand_resistance)
            res = g.shift(1) & d
            return res
        
        df1['wvf_resistance'] = ((df1['High']-df1['Close'].shift(1).rolling(look_back_William_Vix).min())/df1['Close'].shift(1).rolling(look_back_William_Vix).min())*100
        df1['bbl_midLine_resistance'] = (df1['wvf_resistance'].rolling(look_back_Bollinger)).mean()
        df1['bbl_std_dev_resistance'] = multiplier * (df1['wvf_resistance'].rolling(look_back_Bollinger)).std()
        df1['bbl_lowerBand_resistance'] = df1['bbl_midLine_resistance'] - df1['bbl_std_dev_resistance']
        df1['bbl_upperBand_resistance'] =df1['bbl_midLine_resistance'] + df1['bbl_std_dev_resistance']
        df1['wvf_golden_cross']=df1['wvf_resistance']>df1['bbl_upperBand_resistance']
        df1['wvf_death_cross']=df1['wvf_resistance']<df1['bbl_upperBand_resistance']
        df1['wvf_Death_1'] = fn_death(df1['wvf_resistance'],df1['bbl_upperBand_resistance'])
        df1['wvf_resistance_true'] = ((df1['wvf_resistance'] >= df1['bbl_upperBand_resistance']) & (df1['wvf_resistance'] > threshold_resistance))
        df1['iff_1_resistance'] = np.where(df1['wvf_resistance_true'],"orange" ,"gray")
        df1['wvf_resistance_signal'] = np.where((df1['wvf_Death_1'] & df1['wvf_resistance']) > threshold_resistance,"red",df1['iff_1_resistance'])
        Resistance_Support_Color = 'red'
        No_Resistance_Support_Color = 'gray'
        df1['wvf_resistance_validation_Signal'] = np.where(df1['wvf_resistance_true'],Resistance_Support_Color,No_Resistance_Support_Color)
        return df1
class cl_pivot_point:
    def __init__(self):
        pass

    def fn_Standard(df):
        df['PP']=(df['High'].iloc[-1]+df['Low'].iloc[-1]+df['Close'].iloc[-1])/3
        df['R1']=(2*df['PP'])-df['Low'].iloc[-1]
        df['R2']=(df['PP']+(df['High'].iloc[-1]-df['Low'].iloc[-1]))
        df['R3']=(df['High'].iloc[-1]+(2*(df['PP']-df['Low'].iloc[-1])))
        df['S1']=(2*df['PP'])-df['High'].iloc[-1]
        df['S2']=(df['PP']-(df['High'].iloc[-1]-df['Low'].iloc[-1]))
        df['S3']=(df['Low'].iloc[-1]+(2*(df['High'].iloc[-1]-df['PP'])))
        return df[['PP','R1','R2','R3','S1','S2','S3']].iloc[0]

    def fn_Fibonacci(df):
        df['PP']=(df['High'].iloc[-1]+df['Low'].iloc[-1]+df['Close'].iloc[-1])/3
        df['R1']=df['PP'] + 0.382 * (df['High'].iloc[-1] - df['Low'].iloc[-1])
        df['R2']=df['PP'] + 0.618 * (df['High'].iloc[-1] - df['Low'].iloc[-1])
        df['R3']=df['PP'] + (df['High'].iloc[-1] - df['Low'].iloc[-1])
        df['S1']=df['PP'] - 0.382 * (df['High'].iloc[-1] - df['Low'].iloc[-1])
        df['S2']=df['PP'] - 0.618 * (df['High'].iloc[-1] - df['Low'].iloc[-1])
        df['S3']=df['PP'] - (df['High'].iloc[-1] - df['Low'].iloc[-1])
        return df[['PP','R1','R2','R3','S1','S2','S3']].iloc[0]
    def fn_Camarilla(df):
        df['PP']=(df['High'].iloc[-1]+df['Low'].iloc[-1]+df['Close'].iloc[-1])/3
        df['R1']=df['Close'] + 1.1 * (df['High'].iloc[-1] - df['Low'].iloc[-1]) / 12
        df['R2']=df['Close'] + 1.1 * (df['High'].iloc[-1] - df['Low'].iloc[-1]) / 6
        df['R3']=df['Close'] + 1.1 * (df['High'].iloc[-1] - df['Low'].iloc[-1]) / 4
        df['R4']=df['Close'] + 1.1 * (df['High'].iloc[-1] - df['Low'].iloc[-1]) / 2
        df['S1']=df['Close'] - 1.1 * (df['High'].iloc[-1] - df['Low'].iloc[-1]) / 12
        df['S2']=df['Close'] - 1.1 * (df['High'].iloc[-1] - df['Low'].iloc[-1]) / 6
        df['S3']=df['Close'] - 1.1 * (df['High'].iloc[-1] - df['Low'].iloc[-1]) / 4
        df['S4']=df['Close'] - 1.1 * (df['High'].iloc[-1] - df['Low'].iloc[-1]) / 2
        return df[['PP','R1','R2','R3','R4','S1','S2','S3','S4']].iloc[0]

    def fn_Classic(df):
        df['PP']=(df['High'].iloc[-1]+df['Low'].iloc[-1]+df['Close'].iloc[-1])/3
        df['R1']=(2 * df['PP']) - df['Low'].iloc[-1]
        df['R2']=df['PP'] +df['High'].iloc[-1] - df['Low'].iloc[-1]
        df['R3']=df['PP'] +2*(df['High'].iloc[-1] - df['Low'].iloc[-1])
        df['S1']=(2 * df['PP']) - df['High'].iloc[-1]
        df['S2']=df['PP']-df['High'].iloc[-1] + df['Low'].iloc[-1]
        df['S3']=df['PP'] -2*(df['High'].iloc[-1] - df['Low'].iloc[-1])
        return df[['PP','R1','R2','R3','S1','S2','S3']].iloc[0]
    
    def fn_Woodies(df):
        df['PP']=(df['High'].iloc[-1]+df['Low'].iloc[-1]+2*df['Close'].iloc[-1])/4
        df['R1']=(2 * df['PP']) - df['Low'].iloc[-1]
        df['R2']=df['PP'] +df['High'].iloc[-1] - df['Low'].iloc[-1]
        df['S1']=(2 * df['PP']) - df['High'].iloc[-1]
        df['S2']=df['PP']-df['High'].iloc[-1] + df['Low'].iloc[-1]
        return df[['PP','R1','R2','S1','S2']].iloc[0]
    
    def fn_DeMarks(df):
        x=np.where(df['Close'].iloc[-1]<df['Open'].iloc[-1],(df['High'].iloc[-1]+(2*df['Low'].iloc[-1]))+(df['Close'].iloc[-1]),(df['Low'].iloc[-1]+(2*df['High'].iloc[-1])+df['Close'].iloc[-1]))
        df['PP']=x/4
        df['R1']=( x/2) - df['Low'].iloc[-1]
        df['S1']= (x/2) - df['High'].iloc[-1]
        return df[['PP','R1','S1']].iloc[0]
